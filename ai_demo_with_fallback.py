"""
AI Financial Analyst - Demo with AI Integration & Fallback
Showcases AI capabilities with smart fallback when API unavailable
"""

import asyncio
import os
from datetime import datetime
import yfinance as yf
import pandas as pd
import numpy as np
from dotenv import load_dotenv

# Load environment
load_dotenv()

class AIFinancialAnalyst:
    """AI-Enhanced Financial Analyst with Fallback"""
    
    def __init__(self):
        self.ai_enabled = False
        self.ai_client = None
        self._setup_ai_client()
        
    def _setup_ai_client(self):
        """Setup Deepseek AI client"""
        try:
            from openai import AsyncOpenAI
            
            deepseek_key = os.getenv('DEEPSEEK_API_KEY')
            deepseek_base_url = os.getenv('DEEPSEEK_BASE_URL', 'https://api.deepseek.com')
            
            if deepseek_key and deepseek_key != 'your_deepseek_api_key_here':
                self.ai_client = AsyncOpenAI(
                    api_key=deepseek_key,
                    base_url=deepseek_base_url
                )
                self.ai_enabled = True
                print(f"‚úÖ Deepseek AI client initialized: {deepseek_key[:20]}...")
            else:
                print("‚ö†Ô∏è Deepseek API key not found, using fallback mode")
                
        except Exception as e:
            print(f"‚ö†Ô∏è AI client setup error: {e}")
            self.ai_enabled = False
    
    async def get_ai_market_insights(self, symbol: str, analysis_data: dict):
        """Get AI market insights with fallback"""
        print(f"\nü§ñ Generating AI Market Insights for {symbol}...")
        
        if not self.ai_enabled:
            return self._fallback_market_insights(symbol, analysis_data)
        
        try:
            # Create comprehensive prompt
            prompt = self._create_market_analysis_prompt(symbol, analysis_data)
            
            # Call Deepseek API
            response = await self.ai_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {
                        "role": "system",
                        "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng t√†i ch√≠nh h√†ng ƒë·∫ßu v·ªõi 20+ nƒÉm kinh nghi·ªám. H√£y ƒë∆∞a ra ph√¢n t√≠ch chuy√™n s√¢u, kh√°ch quan v√† c√≥ cƒÉn c·ª©."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.3,
                max_tokens=800
            )
            
            ai_response = response.choices[0].message.content
            
            return {
                'enabled': True,
                'source': 'Deepseek-AI',
                'insights': ai_response,
                'market_sentiment': self._extract_sentiment(ai_response),
                'key_factors': self._extract_key_factors(ai_response),
                'confidence': 'High',
                'generated_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è AI API error: {e}")
            print("üîÑ Falling back to advanced rule-based analysis...")
            return self._fallback_market_insights(symbol, analysis_data)
    
    def _create_market_analysis_prompt(self, symbol: str, data: dict):
        """Create comprehensive analysis prompt"""
        current_price = data.get('current_price', 0)
        rsi = data.get('rsi', 50)
        volatility = data.get('volatility_annual', 0.2)
        sharpe = data.get('sharpe_ratio', 0)
        trend = data.get('trend', 'sideways')
        
        return f"""
Ph√¢n t√≠ch th·ªã tr∆∞·ªùng chuy√™n s√¢u cho c·ªï phi·∫øu {symbol}:

TH√îNG TIN T√ÄI CH√çNH:
- Gi√° hi·ªán t·∫°i: ${current_price:.2f}
- RSI: {rsi:.1f} ({'Qu√° mua' if rsi > 70 else 'Qu√° b√°n' if rsi < 30 else 'B√¨nh th∆∞·ªùng'})
- Volatility h√†ng nƒÉm: {volatility:.1%}
- Sharpe Ratio: {sharpe:.2f}
- Xu h∆∞·ªõng hi·ªán t·∫°i: {trend}

Y√äU C·∫¶U PH√ÇN T√çCH:
1. ƒê√°nh gi√° t√¨nh h√¨nh th·ªã tr∆∞·ªùng t·ªïng quan
2. Ph√¢n t√≠ch sentiment v√† t√¢m l√Ω nh√† ƒë·∫ßu t∆∞
3. Nh·∫≠n di·ªán 3-5 y·∫øu t·ªë ch√≠nh ·∫£nh h∆∞·ªüng gi√°
4. D·ª± b√°o xu h∆∞·ªõng ng·∫Øn h·∫°n (1-3 th√°ng)
5. Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ c·ª• th·ªÉ (MUA/B√ÅN/GI·ªÆ)
6. M·ª©c gi√° m·ª•c ti√™u v√† ƒëi·ªÉm d·ª´ng l·ªó
7. Th·ªùi gian n·∫Øm gi·ªØ khuy·∫øn ngh·ªã

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, chuy√™n nghi·ªáp v√† c√≥ cƒÉn c·ª© r√µ r√†ng.
        """
    
    def _fallback_market_insights(self, symbol: str, data: dict):
        """Advanced rule-based market insights when AI unavailable"""
        current_price = data.get('current_price', 0)
        rsi = data.get('rsi', 50)
        volatility = data.get('volatility_annual', 0.2)
        sharpe = data.get('sharpe_ratio', 0)
        
        # Advanced analysis logic
        market_conditions = []
        key_factors = []
        
        # RSI Analysis
        if rsi > 75:
            market_conditions.append("Th·ªã tr∆∞·ªùng trong tr·∫°ng th√°i qu√° mua nghi√™m tr·ªçng")
            key_factors.append(f"RSI cao ({rsi:.1f}) cho th·∫•y √°p l·ª±c b√°n tƒÉng")
        elif rsi > 70:
            market_conditions.append("Th·ªã tr∆∞·ªùng c√≥ d·∫•u hi·ªáu qu√° mua")
            key_factors.append(f"RSI ({rsi:.1f}) g·∫ßn v√πng qu√° mua")
        elif rsi < 25:
            market_conditions.append("Th·ªã tr∆∞·ªùng trong tr·∫°ng th√°i qu√° b√°n nghi√™m tr·ªçng")
            key_factors.append(f"RSI th·∫•p ({rsi:.1f}) t·∫°o c∆° h·ªôi mua v√†o")
        elif rsi < 30:
            market_conditions.append("Th·ªã tr∆∞·ªùng c√≥ d·∫•u hi·ªáu qu√° b√°n")
            key_factors.append(f"RSI ({rsi:.1f}) cho th·∫•y √°p l·ª±c mua tƒÉng")
        else:
            market_conditions.append("RSI trong v√πng c√¢n b·∫±ng")
            key_factors.append(f"RSI ({rsi:.1f}) cho th·∫•y th·ªã tr∆∞·ªùng c√¢n b·∫±ng")
        
        # Volatility Analysis
        if volatility > 0.4:
            market_conditions.append("ƒê·ªô bi·∫øn ƒë·ªông cao, r·ªßi ro l·ªõn")
            key_factors.append(f"Volatility {volatility:.1%} cao h∆°n b√¨nh th∆∞·ªùng")
        elif volatility > 0.25:
            market_conditions.append("ƒê·ªô bi·∫øn ƒë·ªông trung b√¨nh ƒë·∫øn cao")
            key_factors.append(f"Volatility {volatility:.1%} ·ªü m·ª©c trung b√¨nh cao")
        else:
            market_conditions.append("Th·ªã tr∆∞·ªùng t∆∞∆°ng ƒë·ªëi ·ªïn ƒë·ªãnh")
            key_factors.append(f"Volatility th·∫•p {volatility:.1%} cho th·∫•y ·ªïn ƒë·ªãnh")
        
        # Sharpe Ratio Analysis
        if sharpe > 1.5:
            market_conditions.append("Hi·ªáu su·∫•t ƒë·∫ßu t∆∞ r·∫•t t·ªët")
            key_factors.append(f"Sharpe ratio cao ({sharpe:.2f}) cho th·∫•y hi·ªáu qu·∫£ v∆∞·ª£t tr·ªôi")
        elif sharpe > 1:
            market_conditions.append("Hi·ªáu su·∫•t ƒë·∫ßu t∆∞ t·ªët")
            key_factors.append(f"Sharpe ratio {sharpe:.2f} cho th·∫•y hi·ªáu qu·∫£ t·ªët")
        elif sharpe > 0:
            market_conditions.append("Hi·ªáu su·∫•t ƒë·∫ßu t∆∞ ch·∫•p nh·∫≠n ƒë∆∞·ª£c")
            key_factors.append(f"Sharpe ratio d∆∞∆°ng ({sharpe:.2f}) nh∆∞ng ch∆∞a ·∫•n t∆∞·ª£ng")
        else:
            market_conditions.append("Hi·ªáu su·∫•t ƒë·∫ßu t∆∞ k√©m")
            key_factors.append(f"Sharpe ratio √¢m ({sharpe:.2f}) cho th·∫•y r·ªßi ro cao")
        
        # Recommendation Logic
        score = 0
        if rsi < 30: score += 2
        elif rsi > 70: score -= 2
        
        if volatility < 0.2: score += 1
        elif volatility > 0.4: score -= 1
        
        if sharpe > 1: score += 2
        elif sharpe < 0: score -= 2
        
        if score >= 3:
            recommendation = "MUA"
            reasoning = "C√°c ch·ªâ s·ªë k·ªπ thu·∫≠t v√† r·ªßi ro ƒë·ªÅu t√≠ch c·ª±c"
        elif score <= -3:
            recommendation = "B√ÅN"
            reasoning = "Nhi·ªÅu t√≠n hi·ªáu ti√™u c·ª±c, n√™n gi·∫£m t·ª∑ tr·ªçng"
        else:
            recommendation = "GI·ªÆ"
            reasoning = "Th·ªã tr∆∞·ªùng c√≥ t√≠n hi·ªáu tr√°i chi·ªÅu, n√™n quan s√°t th√™m"
        
        # Generate comprehensive insights
        insights = f"""
üè¢ T√åNH H√åNH TH·ªä TR∆Ø·ªúNG T·ªîNG QUAN CHO {symbol}:

üìä Ph√¢n t√≠ch hi·ªán t·∫°i:
{chr(10).join(f"‚Ä¢ {condition}" for condition in market_conditions)}

üéØ C√ÅC Y·∫æU T·ªê CH√çNH:
{chr(10).join(f"‚Ä¢ {factor}" for factor in key_factors)}

üí° ƒê√ÅNH GI√Å CHUY√äN NGHI·ªÜP:
D·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t to√†n di·ªán, {symbol} hi·ªán ƒëang th·ªÉ hi·ªán {len(key_factors)} y·∫øu t·ªë quan tr·ªçng. 
V·ªõi gi√° hi·ªán t·∫°i ${current_price:.2f}, c·ªï phi·∫øu n√†y c√≥ ƒë·ªô bi·∫øn ƒë·ªông {volatility:.1%} v√† RSI {rsi:.1f}.

üìà KHUY·∫æN NGH·ªä ƒê·∫¶U T∆Ø: {recommendation}
L√Ω do: {reasoning}

‚è∞ TH·ªúI GIAN KHUY·∫æN NGH·ªä: 
{'Ng·∫Øn h·∫°n (1-2 th√°ng)' if volatility > 0.3 else 'Trung h·∫°n (3-6 th√°ng)'}

‚ö†Ô∏è L∆ØU √ù: ƒê√¢y l√† ph√¢n t√≠ch k·ªπ thu·∫≠t t·ª± ƒë·ªông, nh√† ƒë·∫ßu t∆∞ n√™n xem x√©t th√™m c√°c y·∫øu t·ªë c∆° b·∫£n v√† th·ªã tr∆∞·ªùng chung.
        """
        
        sentiment = 'T√≠ch c·ª±c' if score > 0 else 'Ti√™u c·ª±c' if score < 0 else 'Trung t√≠nh'
        
        return {
            'enabled': True,
            'source': 'Advanced-Rule-Based-Analysis',
            'insights': insights,
            'market_sentiment': sentiment,
            'key_factors': key_factors,
            'confidence': 'Medium-High',
            'recommendation': recommendation,
            'generated_at': datetime.now().isoformat()
        }
    
    def _extract_sentiment(self, text: str):
        """Extract sentiment from AI response"""
        text_upper = text.upper()
        positive = ['T√çCH C·ª∞C', 'TƒÇNG', 'MUA', 'BULLISH', 'T·∫†I C·ª∞C']
        negative = ['TI√äU C·ª∞C', 'GI·∫¢M', 'B√ÅN', 'BEARISH', 'R·ª¶I RO']
        
        pos_count = sum(1 for word in positive if word in text_upper)
        neg_count = sum(1 for word in negative if word in text_upper)
        
        if pos_count > neg_count:
            return 'T√≠ch c·ª±c'
        elif neg_count > pos_count:
            return 'Ti√™u c·ª±c'
        else:
            return 'Trung t√≠nh'
    
    def _extract_key_factors(self, text: str):
        """Extract key factors from text"""
        lines = text.split('\n')
        factors = []
        
        for line in lines:
            line = line.strip()
            if any(marker in line.lower() for marker in ['‚Ä¢', '-', '1.', '2.', '3.', 'y·∫øu t·ªë', 'nguy√™n nh√¢n']):
                if len(line) > 10 and len(line) < 150:
                    factors.append(line.lstrip('‚Ä¢-123456789. '))
        
        return factors[:5]

async def demo_ai_analysis():
    """Demo AI-enhanced analysis"""
    print("üöÄ AI FINANCIAL ANALYST - ENHANCED DEMO")
    print("=" * 70)
    
    analyst = AIFinancialAnalyst()
    
    # Test with AAPL
    symbol = "AAPL"
    print(f"\nüîç AI Analysis for {symbol}")
    print("=" * 50)
    
    try:
        # Get basic data
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="3mo")
        
        if not data.empty:
            current_price = data['Close'].iloc[-1]
            
            # Calculate basic metrics
            returns = data['Close'].pct_change().dropna()
            volatility_annual = returns.std() * np.sqrt(252)
            
            # RSI
            delta = data['Close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            rsi = (100 - (100 / (1 + rs))).iloc[-1]
            
            # Sharpe ratio
            mean_return = returns.mean() * 252
            sharpe_ratio = (mean_return - 0.02) / volatility_annual
            
            analysis_data = {
                'current_price': current_price,
                'rsi': rsi,
                'volatility_annual': volatility_annual,
                'sharpe_ratio': sharpe_ratio,
                'trend': 'sideways'
            }
            
            # Get AI insights
            ai_insights = await analyst.get_ai_market_insights(symbol, analysis_data)
            
            # Display results
            print(f"\nüìä ANALYSIS RESULTS:")
            print(f"Current Price: ${current_price:.2f}")
            print(f"RSI: {rsi:.1f}")
            print(f"Volatility: {volatility_annual:.1%}")
            print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
            
            print(f"\nü§ñ AI INSIGHTS:")
            print(f"Source: {ai_insights['source']}")
            print(f"Confidence: {ai_insights['confidence']}")
            print(f"Market Sentiment: {ai_insights['market_sentiment']}")
            
            if ai_insights.get('recommendation'):
                print(f"Recommendation: {ai_insights['recommendation']}")
            
            print(f"\nüìù DETAILED ANALYSIS:")
            print("=" * 50)
            print(ai_insights['insights'])
            print("=" * 50)
            
            print(f"\nüîë KEY FACTORS ({len(ai_insights['key_factors'])}):")
            for i, factor in enumerate(ai_insights['key_factors'], 1):
                print(f"{i}. {factor}")
        
        else:
            print("‚ùå No data available")
            
    except Exception as e:
        print(f"‚ùå Error in analysis: {e}")

if __name__ == "__main__":
    asyncio.run(demo_ai_analysis()) 